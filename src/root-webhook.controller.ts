import { 
  Controller, 
  Post, 
  Headers, 
  Logger, 
  HttpCode, 
  HttpStatus,
  BadRequestException,
  Req
} from '@nestjs/common';
import { Request } from 'express';
import { WataWebhookService } from './payments/wata-webhook.service';
import { WataSignatureService } from './payments/wata-signature.service';
import { WataWebhookPayload } from './payments/wata-webhook.controller';
import { PayID19WebhookService } from './payments/payid19-webhook.service';
import { PayID19WebhookData } from './payments/payid19.service';


/**
| * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö webhook'–æ–≤ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º –ø—É—Ç–∏ "/"
| * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WATA –∏ PayID19 webhook'—ã
| */
@Controller('')
export class RootWebhookController {
  private readonly logger = new Logger(RootWebhookController.name);

  constructor(
    private readonly wataWebhookService: WataWebhookService,
    private readonly wataSignatureService: WataSignatureService,
    private readonly payid19WebhookService: PayID19WebhookService,
  ) {}

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö webhook'–æ–≤ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º –ø—É—Ç–∏ "/"
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø webhook'–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
   */
  @Post()
  @HttpCode(HttpStatus.OK)
  async handleRootWebhook(
    @Req() req: Request,
    @Headers('x-signature') signature: string,
    @Headers() headers: any,
  ): Promise<{ success: boolean }> {
    // –ü–æ–ª—É—á–∞–µ–º raw body –∏–∑ middleware (–∏–ª–∏ fallback)
    const rawBody = (req as any).rawBody || (req.body ? JSON.stringify(req.body) : '');
    
    let payload: any;
    try {
      payload = req.body;
      if (typeof req.body === 'string') {
        payload = JSON.parse(req.body);
      }
    } catch (error) {
      this.logger.error('Failed to parse root webhook payload:', error);
      throw new BadRequestException('Invalid JSON payload');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø webhook'–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
    const isWataWebhook = payload.transactionType && payload.transactionId && payload.transactionStatus;
    const isPayID19Webhook = payload.id && payload.order_id && payload.price_amount && payload.private_key;

    if (isWataWebhook) {
      return this.handleWataWebhook(payload as WataWebhookPayload, rawBody, signature, headers);
    
    } else if (isPayID19Webhook) {
      return this.handlePayID19Webhook(payload as PayID19WebhookData, headers);
      
    } else {
      this.logger.warn('Received unknown webhook type on root path:', { 
        hasTransactionType: !!payload.transactionType,
        hasTransactionId: !!payload.transactionId,
        hasId: !!payload.id,
        hasOrderId: !!payload.order_id,
        hasPriceAmount: !!payload.price_amount,
        hasPrivateKey: !!payload.private_key
      });
      return { success: false };
    }

  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç WATA webhook
   */
  private async handleWataWebhook(
    payload: WataWebhookPayload,
    rawBody: string,
    signature: string,
    headers: any
  ): Promise<{ success: boolean }> {
    this.logger.log(`üéØ Received WATA webhook on root path for transaction: ${payload.transactionId}`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('=== WATA WEBHOOK ON ROOT PATH ===');
    console.log('Headers:', headers);
    console.log('Signature:', signature);
    console.log('Raw Body Length:', rawBody.length);
    console.log('Raw Body Preview:', rawBody.substring(0, 200));
    console.log('Parsed Payload:', JSON.stringify(payload, null, 2));
    console.log('================================');

    try {
      // –í–†–ï–ú–ï–ù–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      // TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!');
      
      let isValidSignature = false;
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        isValidSignature = await this.wataSignatureService.verifySignature(
          rawBody,
          signature
        );
        
        if (isValidSignature) {
          console.log('‚úÖ –ü–æ–¥–ø–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!');
        } else {
          console.log('‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        }
      } catch (signError) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏:', signError instanceof Error ? signError.message : 'Unknown error');
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å (–ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏)
      await this.wataWebhookService.processWebhook(payload);

      this.logger.log(`‚úÖ Successfully processed root WATA webhook for transaction: ${payload.transactionId}`);
      return { success: true };
    } catch (error) {
      this.logger.error(`‚ùå Failed to process root WATA webhook:`, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PayID19 webhook
   */
  private async handlePayID19Webhook(
    payload: PayID19WebhookData,
    headers: any
  ): Promise<{ success: boolean }> {
    this.logger.log(`ü™ô Received PayID19 webhook on root path for order: ${payload.order_id}`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('=== PAYID19 WEBHOOK ON ROOT PATH ===');
    console.log('Headers:', headers);
    console.log('Parsed Payload:', JSON.stringify(payload, null, 2));
    console.log('=====================================');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å webhook'–∞ (—Å–≤–µ—Ä—è–µ–º private_key)
      const isValid = await this.payid19WebhookService.validateWebhook(payload);
      
      if (!isValid) {
        this.logger.warn(`Invalid private_key for PayID19 webhook: ${payload.id}`);
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π private_key, –æ—Ç–∫–ª–æ–Ω—è–µ–º webhook');
        throw new BadRequestException('Invalid webhook signature');
      }
      
      console.log('‚úÖ PayID19 webhook –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏!');

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
      await this.payid19WebhookService.processWebhook(payload);

      this.logger.log(`‚úÖ Successfully processed root PayID19 webhook for order: ${payload.order_id}`);
      return { success: true };
    } catch (error) {
      this.logger.error(`‚ùå Failed to process root PayID19 webhook:`, error);
      throw error;
    }
  }
}

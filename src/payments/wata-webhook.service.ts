import { Injectable, Logger } from '@nestjs/common';
import { WataWebhookPayload } from './wata-webhook.controller';
import { BotService } from '../bot/bot.service';
import { FragmentService } from './fragment.service';
import { TransactionLoggerService } from '../common/services/transaction-logger.service';

@Injectable()
export class WataWebhookService {
  private readonly logger = new Logger(WataWebhookService.name);

  constructor(
    private readonly fragmentService: FragmentService,
    private readonly botService: BotService,
    private readonly transactionLogger: TransactionLoggerService,
  ) {}

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å webhook'–∞ –æ—Ç WATA (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WataSignatureService –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
   * @param _rawBody –°—ã—Ä–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON string
   * @param _signature –ü–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Signature
   */
  async verifySignature(_rawBody: string, _signature: string): Promise<boolean> {
    // –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    this.logger.warn('Using deprecated verifySignature method. Use WataSignatureService instead.');
    return true;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç WATA
   */
  async processWebhook(payload: WataWebhookPayload): Promise<void> {
    this.logger.log(`Processing WATA webhook for order: ${payload.orderId}`);

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('üîî WATA PAYMENT UPDATE üîî');
    console.log(`Order ID: ${payload.orderId}`);
    console.log(`Transaction ID: ${payload.transactionId}`);
    console.log(`Status: ${payload.transactionStatus}`);
    console.log(`Amount: ${payload.amount} ${payload.currency}`);
    console.log(`Payment Type: ${payload.transactionType}`);
    console.log(`Payment Time: ${payload.paymentTime}`);
    
    if (payload.transactionStatus === 'Paid') {
      console.log('‚úÖ PAYMENT SUCCESSFUL!');
      console.log(`Commission: ${payload.commission}`);
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
      await this.handleSuccessfulPayment(payload);
    } else if (payload.transactionStatus === 'Declined') {
      console.log('‚ùå PAYMENT FAILED!');
      console.log(`Error Code: ${payload.errorCode}`);
      console.log(`Error Description: ${payload.errorDescription}`);
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
      await this.handleFailedPayment(payload);
    }
    
    console.log('================================');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
   */
  private async handleSuccessfulPayment(payload: WataWebhookPayload): Promise<void> {
    this.logger.log(`Successful payment processing for order: ${payload.orderId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
    const orderInfo = BotService.getOrderInfo(payload.orderId);
    
    if (!orderInfo) {
      console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ: ${payload.orderId}`);
      this.logger.warn(`Order info not found for ${payload.orderId}`);
      return;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    console.log(`‚úÖ Order ${payload.orderId} has been paid successfully!`);
    console.log(`üí∞ Amount: ${payload.amount} ${payload.currency}`);
    console.log(`üïí Time: ${payload.paymentTime}`);
    console.log(`üë§ Telegram User ID: ${orderInfo.userId}`);
    console.log(`üí¨ Chat ID: ${orderInfo.chatId}`);
    console.log(`‚≠ê Stars to buy: ${orderInfo.count}`);
    console.log(`üéÅ Is Gift: ${orderInfo.isGift}`);
    if (orderInfo.isGift && orderInfo.giftUsername) {
      console.log(`üéØ Gift Recipient: @${orderInfo.giftUsername}`);
    }

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –ø–æ–∫—É–ø–∞—Ç—å –∑–≤—ë–∑–¥—ã
      let recipientUsername: string;
      
      if (orderInfo.isGift && orderInfo.giftUsername) {
        // –ü–æ–¥–∞—Ä–æ–∫ - –ø–æ–∫—É–ø–∞–µ–º –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipientUsername = orderInfo.giftUsername;
      } else {
        // –ü–æ–∫—É–ø–∫–∞ –¥–ª—è —Å–µ–±—è - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        recipientUsername = (await this.getUsernameById(orderInfo.userId)) || `user_${orderInfo.userId}`;
        if (!recipientUsername) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${orderInfo.userId}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
          recipientUsername = `user_${orderInfo.userId}`;
        } else {
          console.log(`üë§ Username –ø–æ–ª—É—á–µ–Ω: @${recipientUsername}`);
        }
      }

      console.log(`üöÄ –ü–æ–∫—É–ø–∞–µ–º ${orderInfo.count} –∑–≤—ë–∑–¥ –¥–ª—è @${recipientUsername} —á–µ—Ä–µ–∑ Fragment API...`);
      
      // –ü–æ–∫—É–ø–∞–µ–º –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ Fragment API
      const fragmentOrder = await this.fragmentService.buyStars(
        recipientUsername,
        orderInfo.count,
        false
      );

      console.log(`‚ú® Fragment –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ${fragmentOrder.id}`);
      console.log(`üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${fragmentOrder.username}`);
      console.log(`‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${fragmentOrder.goods_quantity}`);
      console.log(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ TON: ${fragmentOrder.ton_price}`);
      
      if (orderInfo.isGift) {
        console.log(`üéÅ –ü–æ–¥–∞—Ä–æ–∫ ${orderInfo.count} –∑–≤—ë–∑–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @${recipientUsername}!`);
      } else {
        console.log(`‚úÖ ${orderInfo.count} –∑–≤—ë–∑–¥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await this.transactionLogger.logSuccessfulTransaction({
        transactionId: payload.transactionId,
        orderId: payload.orderId,
        amount: payload.amount,
        currency: payload.currency,
        paymentMethod: payload.transactionType || 'WATA',
        commission: payload.commission,
        paymentTime: payload.paymentTime,
        userId: orderInfo.userId,
        username: recipientUsername,
        chatId: orderInfo.chatId,
        starCount: orderInfo.count,
        isGift: orderInfo.isGift,
        giftRecipient: orderInfo.giftUsername,
        fragmentOrderId: fragmentOrder.id,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
      await this.botService.notifyStarsPurchaseSuccess(
        orderInfo.chatId,
        orderInfo.count,
        orderInfo.isGift,
        recipientUsername,
        fragmentOrder.id
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π webhook
      await this.transactionLogger.logWebhookSuccess({
        transactionId: payload.transactionId + '_webhook',
        orderId: payload.orderId,
        amount: payload.amount,
        currency: payload.currency,
        paymentMethod: 'WATA',
        webhookData: payload,
        userId: orderInfo.userId,
        username: recipientUsername,
        chatId: orderInfo.chatId,
        starCount: orderInfo.count,
        isGift: orderInfo.isGift,
        giftRecipient: orderInfo.giftUsername,
        fragmentOrderId: fragmentOrder.id
      });

      // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      BotService.removeOrderInfo(payload.orderId);
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ Fragment API:`, error);
      this.logger.error(`Failed to buy stars for order ${payload.orderId}:`, error);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è –æ—à–∏–±–∫–∏
      let errorUsername: string | null = null;
      if (orderInfo.isGift && orderInfo.giftUsername) {
        errorUsername = orderInfo.giftUsername;
      } else {
        errorUsername = await this.getUsernameById(orderInfo.userId);
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await this.transactionLogger.logProcessingError({
        transactionId: payload.transactionId,
        orderId: payload.orderId,
        amount: payload.amount,
        currency: payload.currency,
        paymentMethod: payload.transactionType || 'WATA',
        processingError: (error as Error)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∑–≤—ë–∑–¥',
        userId: orderInfo.userId,
        username: errorUsername || undefined,
        chatId: orderInfo.chatId,
        starCount: orderInfo.count,
        isGift: orderInfo.isGift,
        giftRecipient: orderInfo.giftUsername,
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π webhook
      await this.transactionLogger.logWebhookFailed({
        transactionId: payload.transactionId + '_webhook_error',
        orderId: payload.orderId,
        amount: payload.amount,
        currency: payload.currency,
        paymentMethod: 'WATA',
        webhookData: payload,
        errorDescription: 'Failed to process stars purchase',
        processingError: (error as Error)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        userId: orderInfo.userId,
        username: errorUsername || undefined,
        chatId: orderInfo.chatId,
        starCount: orderInfo.count,
        isGift: orderInfo.isGift,
        giftRecipient: orderInfo.giftUsername
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
      await this.botService.notifyStarsPurchaseError(
        orderInfo.chatId,
        orderInfo.count,
        orderInfo.isGift,
        (error as Error)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID
   */
  private async getUsernameById(userId: number): Promise<string | null> {
    try {
      if (this.botService) {
        const userInfo = await this.botService.getUserInfo(userId);
        return userInfo?.username || null;
      }
      return null;
    } catch (error) {
      this.logger.warn(`Failed to get username for user ${userId}:`, error);
      return null;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
   */
  private async handleFailedPayment(payload: WataWebhookPayload): Promise<void> {
    this.logger.log(`Failed payment processing for order: ${payload.orderId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const orderInfo = BotService.getOrderInfo(payload.orderId);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let failedUsername: string | null = null;
    if (orderInfo) {
      if (orderInfo.isGift && orderInfo.giftUsername) {
        failedUsername = orderInfo.giftUsername;
      } else {
        failedUsername = await this.getUsernameById(orderInfo.userId);
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await this.transactionLogger.logFailedTransaction({
      transactionId: payload.transactionId,
      orderId: payload.orderId,
      amount: payload.amount,
      currency: payload.currency,
      paymentMethod: payload.transactionType || 'WATA',
      errorCode: payload.errorCode,
      errorDescription: payload.errorDescription,
      userId: orderInfo?.userId,
      username: failedUsername || undefined,
      chatId: orderInfo?.chatId,
      starCount: orderInfo?.count,
      isGift: orderInfo?.isGift,
      giftRecipient: orderInfo?.giftUsername,
    });
    
    // –ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`‚ùå Payment failed for order ${payload.orderId}`);
    console.log(`üí∏ Failed amount: ${payload.amount} ${payload.currency}`);
    console.log(`üìã Error: ${payload.errorCode} - ${payload.errorDescription}`);
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
    if (orderInfo) {
      try {
        await this.botService.notifyStarsPurchaseError(
          orderInfo.chatId,
          orderInfo.count,
          orderInfo.isGift,
          `–ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω: ${payload.errorDescription || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        );
      } catch (notificationError) {
        this.logger.error('Failed to send payment failure notification:', notificationError);
      }
      
      // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      BotService.removeOrderInfo(payload.orderId);
    }
  }
}

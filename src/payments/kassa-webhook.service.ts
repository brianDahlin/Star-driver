import { Injectable, Logger } from '@nestjs/common';
import { KassaWebhookPayload } from './kassa-webhook.controller';
import { BotService } from '../bot/bot.service';
import { FragmentService } from './fragment.service';
import { TransactionLoggerService } from '../common/services/transaction-logger.service';

@Injectable()
export class KassaWebhookService {
  private readonly logger = new Logger(KassaWebhookService.name);
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö webhook'–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  private static readonly processedWebhooks = new Map<string, { timestamp: number; orderId: string }>();
  
  // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–∏ –æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º webhook (1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  private static readonly WEBHOOK_TTL = 60 * 60 * 1000;

  constructor(
    private readonly fragmentService: FragmentService,
    private readonly botService: BotService,
    private readonly transactionLogger: TransactionLoggerService,
  ) {}

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Kassa
   */
  async processWebhook(payload: KassaWebhookPayload): Promise<void> {
    this.logger.log(`Processing Kassa webhook for order: ${payload.order_id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –∑–∞–ø—Ä–æ—Å–∞
    const webhookKey = `${payload.id}_${payload.order_id}`;
    if (this.isWebhookAlreadyProcessed(webhookKey)) {
      console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π webhook –∑–∞–ø—Ä–æ—Å: ${webhookKey}`);
      this.logger.warn(`Duplicate webhook detected: ${webhookKey}. Skipping processing.`);
      return;
    }

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('üîî KASSA PAYMENT UPDATE üîî');
    console.log(`Order ID: ${payload.order_id}`);
    console.log(`Payment ID: ${payload.id}`);
    console.log(`Project ID: ${payload.project_id}`);
    console.log(`Original Amount: ${payload.amount} ${payload.currency}`);
    console.log(`Paid Amount: ${payload.amount_pay} ${payload.currency_pay}`);
    console.log(`Created: ${payload.createDateTime}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (–≤ P2PKassa webhook –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ)
    console.log('‚úÖ PAYMENT SUCCESSFUL!');
    
    try {
      // –ü–æ–º–µ—á–∞–µ–º webhook –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
      this.markWebhookAsProcessed(webhookKey, payload.order_id);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
      await this.handleSuccessfulPayment(payload);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É webhook
      await this.transactionLogger.logWebhookSuccess({
        transactionId: payload.id,
        orderId: payload.order_id,
        amount: payload.amount,
        currency: payload.currency,
        paymentMethod: 'P2PKassa',
        webhookData: payload,
      });
      
    } catch (error) {
      this.logger.error(`Error processing webhook ${webhookKey}:`, error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É webhook
      await this.transactionLogger.logWebhookFailed({
        transactionId: payload.id,
        orderId: payload.order_id,
        amount: payload.amount,
        currency: payload.currency,
        paymentMethod: 'P2PKassa',
        webhookData: payload,
        processingError: error instanceof Error ? error.message : 'Unknown error',
      });
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º webhook –ø—Ä–∏ –æ—à–∏–±–∫–µ
      KassaWebhookService.processedWebhooks.delete(webhookKey);
      
      throw error;
    }
    
    console.log('================================');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
   */
  private async handleSuccessfulPayment(payload: KassaWebhookPayload): Promise<void> {
    this.logger.log(`Successful payment processing for order: ${payload.order_id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
    const orderInfo = BotService.getOrderInfo(payload.order_id);
    
    if (!orderInfo) {
      console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ: ${payload.order_id}`);
      this.logger.warn(`Order info not found for ${payload.order_id}`);
      return;
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ü–û–õ–ù–£–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
    console.log('üìã –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–ê–ó–ï:');
    console.log(`üî¢ Order ID: ${payload.order_id}`);
    console.log(`üë§ User ID: ${orderInfo.userId}`);
    console.log(`üí¨ Chat ID: ${orderInfo.chatId}`);
    console.log(`‚≠ê Stars Count: ${orderInfo.count}`);
    console.log(`üéÅ Is Gift: ${orderInfo.isGift}`);
    if (orderInfo.isGift && orderInfo.giftUsername) {
      console.log(`üéØ Gift Recipient: @${orderInfo.giftUsername}`);
    }
    console.log(`üìù Description: ${orderInfo.description}`);
    console.log(`üïí Order Timestamp: ${orderInfo.timestamp}`);
    console.log('================================');
    

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    console.log(`‚úÖ Order ${payload.order_id} has been paid successfully!`);
    console.log(`üí∞ Amount: ${payload.amount} ${payload.currency}`);
    console.log(`üí≥ Paid: ${payload.amount_pay} ${payload.currency_pay}`);
    console.log(`üïí Time: ${payload.createDateTime}`);
    console.log(`üë§ Telegram User ID: ${orderInfo.userId}`);
    console.log(`üí¨ Chat ID: ${orderInfo.chatId}`);
    console.log(`‚≠ê Stars to buy: ${orderInfo.count}`);
    console.log(`üéÅ Is Gift: ${orderInfo.isGift}`);
    if (orderInfo.isGift && orderInfo.giftUsername) {
      console.log(`üéØ Gift Recipient: @${orderInfo.giftUsername}`);
    }

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –ø–æ–∫—É–ø–∞—Ç—å –∑–≤—ë–∑–¥—ã
      let recipientUsername: string;
      
      if (orderInfo.isGift && orderInfo.giftUsername) {
        // –ü–æ–¥–∞—Ä–æ–∫ - –ø–æ–∫—É–ø–∞–µ–º –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipientUsername = orderInfo.giftUsername;
      } else {
        // –ü–æ–∫—É–ø–∫–∞ –¥–ª—è —Å–µ–±—è - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        recipientUsername = (await this.getUsernameById(orderInfo.userId)) || `user_${orderInfo.userId}`;
        if (!recipientUsername) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${orderInfo.userId}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
          recipientUsername = `user_${orderInfo.userId}`;
        } else {
          console.log(`üë§ Username –ø–æ–ª—É—á–µ–Ω: @${recipientUsername}`);
        }
      }

      console.log(`üöÄ –ü–æ–∫—É–ø–∞–µ–º ${orderInfo.count} –∑–≤—ë–∑–¥ –¥–ª—è @${recipientUsername} —á–µ—Ä–µ–∑ Fragment API...`);
      
      // –ü–æ–∫—É–ø–∞–µ–º –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ Fragment API
      const fragmentOrder = await this.fragmentService.buyStars(
        recipientUsername,
        orderInfo.count,
        true
      );

      // –ü–û–õ–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Fragment –∑–∞–∫–∞–∑–∞
      console.log('\nüåü === –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û FRAGMENT –ó–ê–ö–ê–ó–ï ===');
      console.log(`üìã Full Fragment API Response:`);
      console.log(JSON.stringify(fragmentOrder, null, 2));
      console.log('\nüìä –î–ï–¢–ê–õ–ò FRAGMENT –ó–ê–ö–ê–ó–ê:');
      console.log(`‚ú® Fragment Order ID: ${fragmentOrder.id}`);
      console.log(`üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å (receiver): ${fragmentOrder.receiver}`);
      console.log(`üë§ Username: ${fragmentOrder.username}`);
      console.log(`‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ (goods_quantity): ${fragmentOrder.goods_quantity}`);
      console.log(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ TON (ton_price): ${fragmentOrder.ton_price}`);
      console.log(`üîó Reference ID (ref_id): ${fragmentOrder.ref_id}`);
      console.log(`‚úÖ Success Status: ${fragmentOrder.success}`);
      if (fragmentOrder.sender) {
        console.log(`üìû Sender Phone: ${fragmentOrder.sender.phone_number}`);
        console.log(`üë§ Sender Name: ${fragmentOrder.sender.name}`);
      }
      console.log('=============================================\n');
      
      if (orderInfo.isGift) {
        console.log(`üéÅ –ü–æ–¥–∞—Ä–æ–∫ ${orderInfo.count} –∑–≤—ë–∑–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @${recipientUsername}!`);
      } else {
        console.log(`‚úÖ ${orderInfo.count} –∑–≤—ë–∑–¥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
      await this.botService.notifyStarsPurchaseSuccess(
        orderInfo.chatId,
        orderInfo.count,
        orderInfo.isGift,
        recipientUsername,
        fragmentOrder.id
      );

      // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      BotService.removeOrderInfo(payload.order_id);
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ Fragment API:`, error);
      this.logger.error(`Failed to buy stars for order ${payload.order_id}:`, error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
      await this.botService.notifyStarsPurchaseError(
        orderInfo.chatId,
        orderInfo.count,
        orderInfo.isGift,
        (error as Error)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID
   */
  private async getUsernameById(userId: number): Promise<string | null> {
    try {
      if (this.botService) {
        const userInfo = await this.botService.getUserInfo(userId);
        return userInfo?.username || null;
      }
      return null;
    } catch (error) {
      this.logger.warn(`Failed to get username for user ${userId}:`, error);
      return null;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ webhook —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
   */
  private isWebhookAlreadyProcessed(webhookKey: string): boolean {
    this.cleanupExpiredWebhooks();
    return KassaWebhookService.processedWebhooks.has(webhookKey);
  }
  
  /**
   * –ü–æ–º–µ—á–∞–µ—Ç webhook –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
   */
  private markWebhookAsProcessed(webhookKey: string, orderId: string): void {
    KassaWebhookService.processedWebhooks.set(webhookKey, {
      timestamp: Date.now(),
      orderId,
    });
    this.logger.log(`Webhook marked as processed: ${webhookKey}`);
  }
  
  /**
   * –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö webhook'–∞—Ö
   */
  private cleanupExpiredWebhooks(): void {
    const now = Date.now();
    const expiredKeys: string[] = [];
    
    for (const [key, data] of KassaWebhookService.processedWebhooks.entries()) {
      if (now - data.timestamp > KassaWebhookService.WEBHOOK_TTL) {
        expiredKeys.push(key);
      }
    }
    
    expiredKeys.forEach(key => {
      KassaWebhookService.processedWebhooks.delete(key);
      this.logger.debug(`Cleaned up expired webhook record: ${key}`);
    });
    
    if (expiredKeys.length > 0) {
      this.logger.log(`Cleaned up ${expiredKeys.length} expired webhook records`);
    }
  }
}

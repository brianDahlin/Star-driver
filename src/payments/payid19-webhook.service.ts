import { Injectable, Logger } from '@nestjs/common';
import { PayID19WebhookData, PayID19Service } from './payid19.service';
import { BotService } from '../bot/bot.service';
import { FragmentService } from './fragment.service';
import { TransactionLoggerService } from '../common/services/transaction-logger.service';

@Injectable()
export class PayID19WebhookService {
  private readonly logger = new Logger(PayID19WebhookService.name);

  constructor(
    private readonly payid19Service: PayID19Service,
    private readonly fragmentService: FragmentService,
    private readonly botService: BotService,
    private readonly transactionLogger: TransactionLoggerService,
  ) {}

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å webhook'–∞ –æ—Ç PayID19
   */
  async validateWebhook(payload: PayID19WebhookData): Promise<boolean> {
    return this.payid19Service.validateWebhook(payload);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç PayID19
   */
  async processWebhook(payload: PayID19WebhookData): Promise<void> {
    this.logger.log(`Processing PayID19 webhook for order: ${payload.order_id}`);

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('üîî PAYID19 PAYMENT UPDATE üîî');
    console.log(`Order ID: ${payload.order_id}`);
    console.log(`Invoice ID: ${payload.id}`);
    if (payload.price_amount && payload.price_currency) {
      console.log(`Price Amount: ${payload.price_amount} ${payload.price_currency}`);
    }
    if (payload.amount && payload.amount_currency) {
      console.log(`Actual Amount: ${payload.amount} ${payload.amount_currency}`);
    }
    console.log(`Test Mode: ${payload.test === 1 ? 'YES' : 'NO'}`);
    if (payload.created_at) {
      console.log(`Created At: ${payload.created_at}`);
    }
    if (payload.ip) {
      console.log(`IP: ${payload.ip}`);
    }
    
    // PayID19 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    console.log('‚úÖ CRYPTO PAYMENT SUCCESSFUL!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ order_id
    if (!payload.order_id) {
      console.log('‚ö†Ô∏è Missing order_id in webhook payload, cannot process');
      this.logger.warn('Missing order_id in PayID19 webhook payload');
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    await this.handleSuccessfulPayment(payload);
    
    console.log('================================');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂
   */
  private async handleSuccessfulPayment(payload: PayID19WebhookData): Promise<void> {
    this.logger.log(`Successful crypto payment processing for order: ${payload.order_id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
    const orderInfo = BotService.getOrderInfo(payload.order_id || '');
    
    if (!orderInfo) {
      console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ: ${payload.order_id}`);
      this.logger.warn(`Order info not found for ${payload.order_id}`);
      return;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    console.log(`‚úÖ Order ${payload.order_id} has been paid with cryptocurrency!`);
    console.log(`üí∞ Price: ${payload.price_amount} ${payload.price_currency}`);
    console.log(`ü™ô Received: ${payload.amount} ${payload.amount_currency}`);
    console.log(`üë§ Telegram User ID: ${orderInfo.userId}`);
    console.log(`üí¨ Chat ID: ${orderInfo.chatId}`);
    console.log(`‚≠ê Stars to buy: ${orderInfo.count}`);
    console.log(`üéÅ Is Gift: ${orderInfo.isGift}`);
    if (orderInfo.isGift && orderInfo.giftUsername) {
      console.log(`üéØ Gift Recipient: @${orderInfo.giftUsername}`);
    }

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å username –∏–∑ description webhook'–∞
      let recipientUsername: string | null = null;
      
      if (payload.description) {
        const match = payload.description.match(/recipient:([^\s|]+)/);
        if (match) {
          recipientUsername = match[1];
          console.log(`üéØ Username –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ webhook: @${recipientUsername}`);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
      if (!recipientUsername) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å username –∏–∑ webhook, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞...');
        
        if (orderInfo.isGift && orderInfo.giftUsername) {
          // –ü–æ–¥–∞—Ä–æ–∫ - –ø–æ–∫—É–ø–∞–µ–º –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
          recipientUsername = orderInfo.giftUsername;
        } else {
          // –ü–æ–∫—É–ø–∫–∞ –¥–ª—è —Å–µ–±—è - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
          const username = await this.getUsernameById(orderInfo.userId);
          if (!username) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${orderInfo.userId}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
            recipientUsername = `user_${orderInfo.userId}`;
          } else {
            recipientUsername = username;
            console.log(`üë§ Username –ø–æ–ª—É—á–µ–Ω: @${recipientUsername}`);
          }
        }
      }
      
      if (!recipientUsername) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å username –ø–æ–ª—É—á–∞—Ç–µ–ª—è`);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å username –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
      }

      console.log(`üöÄ –ü–æ–∫—É–ø–∞–µ–º ${orderInfo.count} –∑–≤—ë–∑–¥ –¥–ª—è @${recipientUsername} —á–µ—Ä–µ–∑ Fragment API...`);
      
      // –ü–æ–∫—É–ø–∞–µ–º –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ Fragment API
      const fragmentOrder = await this.fragmentService.buyStars(
        recipientUsername,
        orderInfo.count,
        true 
      );

      console.log(`‚ú® Fragment –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ${fragmentOrder.id}`);
      console.log(`üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${fragmentOrder.username}`);
      console.log(`‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${fragmentOrder.goods_quantity}`);
      console.log(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ TON: ${fragmentOrder.ton_price}`);
      
      if (orderInfo.isGift) {
        console.log(`üéÅ –ü–æ–¥–∞—Ä–æ–∫ ${orderInfo.count} –∑–≤—ë–∑–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @${recipientUsername}!`);
      } else {
        console.log(`‚úÖ ${orderInfo.count} –∑–≤—ë–∑–¥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await this.transactionLogger.logSuccessfulTransaction({
        transactionId: payload.id,
        orderId: payload.order_id || '',
        amount: payload.price_amount,
        currency: payload.price_currency,
        paymentMethod: 'PayID19-Crypto',
        paymentTime: payload.created_at,
        userId: orderInfo.userId,
        username: recipientUsername,
        chatId: orderInfo.chatId,
        starCount: orderInfo.count,
        isGift: orderInfo.isGift,
        giftRecipient: orderInfo.giftUsername,
        fragmentOrderId: fragmentOrder.id,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
      await this.botService.notifyStarsPurchaseSuccess(
        orderInfo.chatId,
        orderInfo.count,
        orderInfo.isGift,
        recipientUsername,
        fragmentOrder.id
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π webhook
      await this.transactionLogger.logWebhookSuccess({
        transactionId: payload.id + '_webhook',
        orderId: payload.order_id || '',
        amount: payload.price_amount,
        currency: payload.price_currency,
        paymentMethod: 'PayID19',
        webhookData: payload,
        userId: orderInfo.userId,
        username: recipientUsername,
        chatId: orderInfo.chatId,
        starCount: orderInfo.count,
        isGift: orderInfo.isGift,
        giftRecipient: orderInfo.giftUsername,
        fragmentOrderId: fragmentOrder.id
      });

      // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      BotService.removeOrderInfo(payload.order_id || '');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ Fragment API:`, error);
      this.logger.error(`Failed to buy stars for order ${payload.order_id}:`, error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∑–≤—ë–∑–¥';
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è –æ—à–∏–±–∫–∏
      let errorUsername: string | null = null;
      if (orderInfo.isGift && orderInfo.giftUsername) {
        errorUsername = orderInfo.giftUsername;
      } else {
        errorUsername = await this.getUsernameById(orderInfo.userId);
      }
      
      await this.transactionLogger.logProcessingError({
        transactionId: payload.id,
        orderId: payload.order_id || '',
        amount: payload.price_amount,
        currency: payload.price_currency,
        paymentMethod: 'PayID19-Crypto',
        processingError: errorMessage,
        userId: orderInfo.userId,
        username: errorUsername || undefined,
        chatId: orderInfo.chatId,
        starCount: orderInfo.count,
        isGift: orderInfo.isGift,
        giftRecipient: orderInfo.giftUsername,
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π webhook
      await this.transactionLogger.logWebhookFailed({
        transactionId: payload.id + '_webhook_error',
        orderId: payload.order_id || '',
        amount: payload.price_amount,
        currency: payload.price_currency,
        paymentMethod: 'PayID19',
        webhookData: payload,
        errorDescription: 'Failed to process stars purchase',
        processingError: errorMessage,
        userId: orderInfo.userId,
        username: errorUsername || undefined,
        chatId: orderInfo.chatId,
        starCount: orderInfo.count,
        isGift: orderInfo.isGift,
        giftRecipient: orderInfo.giftUsername
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
      await this.botService.notifyStarsPurchaseError(
        orderInfo.chatId,
        orderInfo.count,
        orderInfo.isGift,
        errorMessage
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID
   */
  private async getUsernameById(userId: number): Promise<string | null> {
    try {
      if (this.botService) {
        const userInfo = await this.botService.getUserInfo(userId);
        return userInfo?.username || null;
      }
      return null;
    } catch (error) {
      this.logger.warn(`Failed to get username for user ${userId}:`, error);
      return null;
    }
  }
}

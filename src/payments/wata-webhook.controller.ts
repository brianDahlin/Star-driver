import { 
  Controller, 
  Post, 
  Body, 
  Headers, 
  Logger, 
  HttpCode, 
  HttpStatus,
  BadRequestException,
  Req
} from '@nestjs/common';
import { Request } from 'express';
import { WataWebhookService } from './wata-webhook.service';
import { WataSignatureService } from './wata-signature.service';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç WATA
export interface WataWebhookPayload {
  transactionType: string; // CardCrypto, SBP, T-Pay
  transactionId: string;
  terminalPublicId: string;
  transactionStatus: string; // Paid, Declined
  errorCode?: string;
  errorDescription?: string;
  terminalName: string;
  amount: number;
  currency: string;
  orderId: string;
  orderDescription: string;
  commission: number;
  paymentTime: string;
  email?: string;
}

@Controller('webhooks/wata')
export class WataWebhookController {
  private readonly logger = new Logger(WataWebhookController.name);

  constructor(
    private readonly wataWebhookService: WataWebhookService,
    private readonly wataSignatureService: WataSignatureService,
  ) {}

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç WATA —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∏
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç raw body –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ RSA –ø–æ–¥–ø–∏—Å–∏
   */
  @Post()
  @HttpCode(HttpStatus.OK)
  async handleWebhook(
    @Req() req: Request,
    @Headers('x-signature') signature: string,
    @Headers() headers: any,
  ): Promise<{ success: boolean }> {
    // –ü–æ–ª—É—á–∞–µ–º raw body –∏–∑ middleware (–∏–ª–∏ fallback)
    const rawBody = (req as any).rawBody || (req.body ? JSON.stringify(req.body) : '');
    
    let payload: WataWebhookPayload;
    try {
      payload = req.body;
      if (typeof req.body === 'string') {
        payload = JSON.parse(req.body);
      }
    } catch (error) {
      this.logger.error('Failed to parse webhook payload:', error);
      throw new BadRequestException('Invalid JSON payload');
    }

    this.logger.log(`Received WATA webhook for transaction: ${payload.transactionId}`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('=== WATA WEBHOOK RECEIVED ===');
    console.log('Headers:', headers);
    console.log('Signature:', signature);
    console.log('Raw Body Length:', rawBody.length);
    console.log('Raw Body Preview:', rawBody.substring(0, 200));
    console.log('Parsed Payload:', JSON.stringify(payload, null, 2));
    console.log('===========================');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook'–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
      const isValidSignature = await this.wataSignatureService.verifySignature(
        rawBody,
        signature
      );

      if (!isValidSignature) {
        this.logger.warn(`Invalid signature for transaction: ${payload.transactionId}`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const debugResult = await this.wataSignatureService.verifySignatureDebug(rawBody, signature);
        console.log('üîç Signature verification debug:', debugResult);
        
        throw new BadRequestException('Invalid signature');
      }

      console.log('‚úÖ Signature verification successful!');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
      await this.wataWebhookService.processWebhook(payload);

      this.logger.log(`Successfully processed WATA webhook for transaction: ${payload.transactionId}`);
      return { success: true };
    } catch (error) {
      this.logger.error(`Failed to process WATA webhook:`, error);
      throw error;
    }
  }

  /**
   * –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook (–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π POST endpoint
   */
  @Post('legacy')
  @HttpCode(HttpStatus.OK)
  async handleWebhookLegacy(
    @Body() payload: WataWebhookPayload,
    @Headers('x-signature') signature: string,
    @Headers() headers: any,
  ): Promise<{ success: boolean }> {
    this.logger.log(`Received WATA webhook (legacy) for transaction: ${payload.transactionId}`);
    
    console.log('=== WATA WEBHOOK LEGACY ===');
    console.log('Headers:', headers);
    console.log('Signature:', signature);
    console.log('Payload:', JSON.stringify(payload, null, 2));
    console.log('============================');

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
      const rawBody = JSON.stringify(payload);
      const isValidSignature = await this.wataWebhookService.verifySignature(
        rawBody,
        signature
      );

      if (!isValidSignature) {
        this.logger.warn(`Invalid signature for transaction: ${payload.transactionId}`);
        throw new BadRequestException('Invalid signature');
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
      await this.wataWebhookService.processWebhook(payload);

      this.logger.log(`Successfully processed WATA webhook for transaction: ${payload.transactionId}`);
      return { success: true };
    } catch (error) {
      this.logger.error(`Failed to process WATA webhook:`, error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook'–æ–≤ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
   */
  @Post('test')
  @HttpCode(HttpStatus.OK)
  async testWebhook(@Body() payload: any): Promise<{ success: boolean }> {
    console.log('=== TEST WATA WEBHOOK ===');
    console.log('Payload:', JSON.stringify(payload, null, 2));
    console.log('========================');
    
    return { success: true };
  }
}

// src/main.ts
import 'dotenv/config';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { AppLogger } from './utils/logger';
import { ConfigService } from '@nestjs/config';
import { BotService } from './bot/bot.service';
import { Telegraf, Context } from 'telegraf';
import { CallbackData } from './common/constants/payment.constants';

async function bootstrap(): Promise<void> {
  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DI-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
  const appCtx = await NestFactory.createApplicationContext(AppModule, {
    logger: AppLogger,
  });
  AppLogger.log('üü¢ Application context initialized');

  const config = appCtx.get(ConfigService);
  const botService = appCtx.get(BotService);

  const token = config.getOrThrow<string>('TELEGRAM_TOKEN');
  const bot = new Telegraf<Context>(token);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.start((ctx) => botService.handleStart(ctx.chat.id));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã
  bot.action(CallbackData.BUY, (ctx) => {
    // —É–±–∏—Ä–∞–µ–º —á–∞—Å—ã
    ctx.answerCbQuery().catch(() => {});
    return botService.handleCallback(
      ctx.callbackQuery.id,
      CallbackData.BUY,
      ctx.from.id,
    );
  });
  bot.action(CallbackData.GIFT, (ctx) => {
    ctx.answerCbQuery().catch(() => {});
    return botService.handleCallback(
      ctx.callbackQuery.id,
      CallbackData.GIFT,
      ctx.from.id,
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('text', (ctx) => {
    // ctx.message.text –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è 'text' —Å–æ–±—ã—Ç–∏—è
    return botService.handleMessage(ctx.chat.id, ctx.message.text);
  });

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫, –∑–∞–ø—É—Å–∫–∞–µ–º polling
  await bot.telegram.deleteWebhook();
  AppLogger.log('üîÑ Webhook cleared, starting polling');
  await bot.launch({ dropPendingUpdates: true });
  AppLogger.log('ü§ñ Bot polling launched');

  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
}

bootstrap().catch((err) => AppLogger.error('‚ùå Bootstrap failed', err));

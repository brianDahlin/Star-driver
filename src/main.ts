import 'dotenv/config';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { AppLogger } from './utils/logger';
import { ConfigService } from '@nestjs/config';
import { BotService } from './bot/bot.service';
import { Telegraf, Context } from 'telegraf';
import { CallbackData } from './common/constants/payment.constants';
import { Markup } from 'telegraf';

async function bootstrap(): Promise<void> {
  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DI-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
  const appCtx = await NestFactory.createApplicationContext(AppModule, {
    logger: AppLogger,
  });
  AppLogger.log('üü¢ Application context initialized');

  const mainKeyboard = Markup.keyboard([
    ['‚≠ê –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã'],
    ['üéÅ –°–¥–µ–ª–∞—Ç—å –ü–æ–¥–∞—Ä–æ–∫ –î—Ä—É–≥—É'],
  ])
    .resize()
    .oneTime(false);
  const config = appCtx.get(ConfigService);
  const botService = appCtx.get(BotService);

  const token = config.getOrThrow<string>('TELEGRAM_TOKEN');
  const bot = new Telegraf<Context>(token);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.start(async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
    return botService.handleStart(ctx.chat.id);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã
  bot.action(CallbackData.BUY, (ctx) => {
    // —É–±–∏—Ä–∞–µ–º —á–∞—Å—ã
    ctx.answerCbQuery().catch(() => {});
    return botService.handleCallback(
      ctx.callbackQuery.id,
      CallbackData.BUY,
      ctx.from.id,
    );
  });
  bot.action(CallbackData.GIFT, (ctx) => {
    ctx.answerCbQuery().catch(() => {});
    return botService.handleCallback(
      ctx.callbackQuery.id,
      CallbackData.GIFT,
      ctx.from.id,
    );
  });

  bot.command('buy_stars', (ctx) => {
    // —ç–º—É–ª–∏—Ä—É–µ–º callback –±–µ–∑ queryId
    return botService.handleCallback('', CallbackData.BUY, ctx.chat.id);
  });

  // Slash-–∫–æ–º–∞–Ω–¥–∞ /gift
  bot.command('gift', (ctx) => {
    return botService.handleCallback('', CallbackData.GIFT, ctx.chat.id);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('text', (ctx) => {
    const text = ctx.message.text;

    // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´‚≠ê –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã¬ª –Ω–∞ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    if (text === '‚≠ê –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã') {
      // –ø—É—Å—Ç–æ–π queryId, –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è Reply-–∫–Ω–æ–ø–æ–∫
      return botService.handleCallback('', CallbackData.BUY, ctx.chat.id);
    }

    // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´üéÅ –ö—É–ø–∏—Ç—å –î—Ä—É–≥—É¬ª
    if (text === 'üéÅ –°–¥–µ–ª–∞—Ç—å –ü–æ–¥–∞—Ä–æ–∫ –î—Ä—É–≥—É') {
      return botService.handleCallback('', CallbackData.GIFT, ctx.chat.id);
    }

    // –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç-—Ñ–ª–æ—É
    return botService.handleMessage(ctx.chat.id, text);
  });

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫, –∑–∞–ø—É—Å–∫–∞–µ–º polling
  await bot.telegram.deleteWebhook();
  AppLogger.log('üîÑ Webhook cleared, starting polling');
  await bot.launch({ dropPendingUpdates: true });
  AppLogger.log('ü§ñ Bot polling launched');

  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
}

bootstrap().catch((err) => AppLogger.error('‚ùå Bootstrap failed', err));

// import 'dotenv/config';
// import { NestFactory } from '@nestjs/core';
// import { AppModule } from './app.module';
// import { AppLogger } from './utils/logger';
// import { FragmentService } from './payments/fragment.service';

// async function bootstrap() {
//   const appCtx = await NestFactory.createApplicationContext(AppModule, {
//     logger: AppLogger,
//   });
//   const fragment = appCtx.get(FragmentService);

//   try {
//     await fragment['authenticate'](); // –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
//     AppLogger.log(`‚úÖ JWT token: ${fragment['jwtToken']}`);
//   } catch (err) {
//     AppLogger.error('‚ùå Authentication failed', err as Error);
//   }

//   process.exit(0); // –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
// }
// bootstrap().catch((err) => AppLogger.error('‚ùå Bootstrap failed', err));

import 'dotenv/config';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { AppLogger } from './utils/logger';
import { ConfigService } from '@nestjs/config';
import { BotService } from './bot/bot.service';
import { Telegraf, Context } from 'telegraf';
import { CallbackData } from './common/constants/payment.constants';

import * as bodyParser from 'body-parser';
import { NestExpressApplication } from '@nestjs/platform-express';

async function bootstrap(): Promise<void> {
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ NestJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å HTTP —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è webhook'–æ–≤
  const app = await NestFactory.create<NestExpressApplication>(AppModule, {
    logger: AppLogger,
  });

  // Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ raw body –¥–ª—è WATA webhook'–æ–≤
  app.use((req: any, res: any, next: any) => {
    if (req.originalUrl && req.originalUrl.includes('/webhooks/wata')) {
      bodyParser.text({ type: '*/*', limit: '50mb' })(req, res, (err) => {
        if (err) {
          return next(err);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º raw body –≤ —Å–≤–æ–π—Å—Ç–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
        (req as any).rawBody = req.body;

        // –ü–∞—Ä—Å–∏–º JSON –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try {
          if (typeof req.body === 'string') {
            req.body = JSON.parse(req.body);
          }
        } catch (parseError) {
          AppLogger.warn('Failed to parse JSON for WATA webhook', parseError);
        }

        next();
      });
    } else {
      next();
    }
  });
  
  // –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è webhook'–æ–≤
  app.enableCors();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000 –¥–ª—è webhook'–æ–≤
  const port = process.env.PORT || 3000;
  await app.listen(port);
  AppLogger.log(`üåê HTTP server started on port ${port} for webhooks`);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  AppLogger.log('üú¢ Application context initialized');

  // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ BotService
  const config = app.get(ConfigService);
  const botService = app.get(BotService);

  const token = config.getOrThrow<string>('TELEGRAM_TOKEN');
  const bot = new Telegraf<Context>(token);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é (Menu Button)
  await bot.telegram.setChatMenuButton({
    menuButton: {
      type: 'commands'
    }
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
  await bot.telegram.setMyCommands([
    { command: 'start', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
    { command: 'buy_stars', description: '‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã' },
    { command: 'gift', description: 'üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –∑–≤—ë–∑–¥—ã –¥—Ä—É–≥—É' },
    { command: 'support', description: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞' },
  ]);
  
  AppLogger.log('üîß Menu button and commands configured');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.start(async (ctx) => {
    return botService.handleStart(ctx.chat.id);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã
  bot.action(CallbackData.BUY, (ctx) => {
    // —É–±–∏—Ä–∞–µ–º —á–∞—Å—ã
    ctx.answerCbQuery().catch(() => {});
    return botService.handleCallback(
      ctx.callbackQuery.id,
      CallbackData.BUY,
      ctx.from.id,
    );
  });
  bot.action(CallbackData.GIFT, (ctx) => {
    ctx.answerCbQuery().catch(() => {});
    return botService.handleCallback(
      ctx.callbackQuery.id,
      CallbackData.GIFT,
      ctx.from.id,
    );
  });

  bot.command('buy_stars', (ctx) => {
    // —ç–º—É–ª–∏—Ä—É–µ–º callback –±–µ–∑ queryId
    return botService.handleCallback('', CallbackData.BUY, ctx.chat.id);
  });

  // Slash-–∫–æ–º–∞–Ω–¥–∞ /gift
  bot.command('gift', (ctx) => {
    return botService.handleCallback('', CallbackData.GIFT, ctx.chat.id);
  });
  
  // Slash-–∫–æ–º–∞–Ω–¥–∞ /support
  bot.command('support', (ctx) => {
    return botService.handleCallback('', CallbackData.SUPPORT, ctx.chat.id);
  });
  

  bot.on('text', (ctx) => {
    const text = ctx.message.text;

    // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´‚≠ê –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã¬ª –Ω–∞ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    if (text === '‚≠ê –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã') {
      // –ø—É—Å—Ç–æ–π queryId, –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è Reply-–∫–Ω–æ–ø–æ–∫
      return botService.handleCallback('', CallbackData.BUY, ctx.chat.id);
    }

    // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´üéÅ –ö—É–ø–∏—Ç—å –î—Ä—É–≥—É¬ª
    if (text === 'üéÅ –°–¥–µ–ª–∞—Ç—å –ü–æ–¥–∞—Ä–æ–∫ –î—Ä—É–≥—É') {
      return botService.handleCallback('', CallbackData.GIFT, ctx.chat.id);
    }

    // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª
    if (text === '–ü–æ–¥–¥–µ—Ä–∂–∫–∞') {
      return botService.handleCallback('', CallbackData.SUPPORT, ctx.chat.id);
    }

    // –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç-—Ñ–ª–æ—É
    return botService.handleMessage(ctx.chat.id, text);
  });

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫, –∑–∞–ø—É—Å–∫–∞–µ–º polling
  await bot.telegram.deleteWebhook();
  AppLogger.log('üîÑ Webhook cleared, starting polling');
  await bot.launch({ dropPendingUpdates: true });
  AppLogger.log('ü§ñ Bot polling launched');

  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
}

bootstrap().catch((err) => AppLogger.error('‚ùå Bootstrap failed', err));
=======
import { Markup } from 'telegraf';

async function bootstrap(): Promise<void> {
  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DI-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
  const appCtx = await NestFactory.createApplicationContext(AppModule, {
    logger: AppLogger,
  });
  AppLogger.log('üü¢ Application context initialized');

  const mainKeyboard = Markup.keyboard([
    ['‚≠ê –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã'],
    ['üéÅ –°–¥–µ–ª–∞—Ç—å –ü–æ–¥–∞—Ä–æ–∫ –î—Ä—É–≥—É'],
  ])
    .resize()
    .oneTime(false);
  const config = appCtx.get(ConfigService);
  const botService = appCtx.get(BotService);

  const token = config.getOrThrow<string>('TELEGRAM_TOKEN');
  const bot = new Telegraf<Context>(token);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.start(async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
    return botService.handleStart(ctx.chat.id);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã
  bot.action(CallbackData.BUY, (ctx) => {
    // —É–±–∏—Ä–∞–µ–º —á–∞—Å—ã
    ctx.answerCbQuery().catch(() => {});
    return botService.handleCallback(
      ctx.callbackQuery.id,
      CallbackData.BUY,
      ctx.from.id,
    );
  });
  bot.action(CallbackData.GIFT, (ctx) => {
    ctx.answerCbQuery().catch(() => {});
    return botService.handleCallback(
      ctx.callbackQuery.id,
      CallbackData.GIFT,
      ctx.from.id,
    );
  });

  bot.command('buy_stars', (ctx) => {
    // —ç–º—É–ª–∏—Ä—É–µ–º callback –±–µ–∑ queryId
    return botService.handleCallback('', CallbackData.BUY, ctx.chat.id);
  });

  // Slash-–∫–æ–º–∞–Ω–¥–∞ /gift
  bot.command('gift', (ctx) => {
    return botService.handleCallback('', CallbackData.GIFT, ctx.chat.id);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('text', (ctx) => {
    const text = ctx.message.text;

    // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´‚≠ê –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã¬ª –Ω–∞ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    if (text === '‚≠ê –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã') {
      // –ø—É—Å—Ç–æ–π queryId, –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è Reply-–∫–Ω–æ–ø–æ–∫
      return botService.handleCallback('', CallbackData.BUY, ctx.chat.id);
    }

    // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´üéÅ –ö—É–ø–∏—Ç—å –î—Ä—É–≥—É¬ª
    if (text === 'üéÅ –°–¥–µ–ª–∞—Ç—å –ü–æ–¥–∞—Ä–æ–∫ –î—Ä—É–≥—É') {
      return botService.handleCallback('', CallbackData.GIFT, ctx.chat.id);
    }

    // –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç-—Ñ–ª–æ—É
    return botService.handleMessage(ctx.chat.id, text);
  });

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫, –∑–∞–ø—É—Å–∫–∞–µ–º polling
  await bot.telegram.deleteWebhook();
  AppLogger.log('üîÑ Webhook cleared, starting polling');
  await bot.launch({ dropPendingUpdates: true });
  AppLogger.log('ü§ñ Bot polling launched');

  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
}

bootstrap().catch((err) => AppLogger.error('‚ùå Bootstrap failed', err));

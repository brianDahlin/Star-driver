import { Injectable, Logger } from '@nestjs/common';
import { writeFile, appendFile, existsSync, mkdirSync } from 'fs';
import { promisify } from 'util';
import { join } from 'path';

const writeFileAsync = promisify(writeFile);
const appendFileAsync = promisify(appendFile);

export interface TransactionLog {
  timestamp: string;
  transactionId: string;
  orderId: string;
  status: 'PAID' | 'DECLINED' | 'PENDING' | 'ERROR' | 'PAYMENT_CREATED' | 'PAYMENT_FAILED' | 'WEBHOOK_SUCCESS' | 'WEBHOOK_FAILED';
  amount: number;
  currency: string;
  paymentMethod: string;
  userId?: number;
  username?: string;
  chatId?: number;
  starCount?: number;
  isGift?: boolean;
  giftRecipient?: string;
  errorCode?: string;
  errorDescription?: string;
  commission?: number;
  paymentTime?: string;
  fragmentOrderId?: string;
  processingError?: string;
  loggedAt?: string;
  paymentUrl?: string;
  webhookData?: any;
  operationType?: 'PAYMENT' | 'WEBHOOK';
}

@Injectable()
export class TransactionLoggerService {
  private readonly logger = new Logger(TransactionLoggerService.name);
  private readonly logsDir = join(process.cwd(), 'logs');
  private readonly transactionsFile = join(this.logsDir, 'transactions.json');
  private readonly dailyLogFile = join(this.logsDir, `transactions-${new Date().toISOString().split('T')[0]}.log`);

  constructor() {
    this.ensureLogsDirectory();
  }

  /**
   * –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   */
  private ensureLogsDirectory(): void {
    if (!existsSync(this.logsDir)) {
      mkdirSync(this.logsDir, { recursive: true });
      this.logger.log(`Created logs directory: ${this.logsDir}`);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ JSON —Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥
   */
  async logTransaction(transaction: TransactionLog): Promise<void> {
    try {
      // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const enrichedTransaction = {
        ...transaction,
        timestamp: new Date().toISOString(),
        loggedAt: new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' }),
      };

      // 1. –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
      this.logToConsole(enrichedTransaction);

      // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
      await this.saveToJsonFile(enrichedTransaction);

      // 3. –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥
      await this.appendToDailyLog(enrichedTransaction);

      this.logger.log(`Transaction logged: ${transaction.transactionId}`);
    } catch (error) {
      this.logger.error('Failed to log transaction:', error);
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  private logToConsole(transaction: TransactionLog): void {
    const statusIcon = this.getStatusIcon(transaction.status);
    
    console.log('\n' + '='.repeat(80));
    console.log(`${statusIcon} –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø ${transaction.status} ${statusIcon}`);
    console.log('='.repeat(80));
    console.log(`üïí –í—Ä–µ–º—è: ${transaction.loggedAt}`);
    console.log(`üî¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transaction.transactionId}`);
    console.log(`üì¶ ID –∑–∞–∫–∞–∑–∞: ${transaction.orderId}`);
    console.log(`üí∞ –°—É–º–º–∞: ${transaction.amount} ${transaction.currency}`);
    console.log(`üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${transaction.paymentMethod}`);
    
    if (transaction.userId) {
      console.log(`üë§ User ID: ${transaction.userId}`);
    }
    
    if (transaction.username) {
      console.log(`üë§ Username: @${transaction.username}`);
    }
    
    if (transaction.chatId) {
      console.log(`üí¨ Chat ID: ${transaction.chatId}`);
    }
    
    if (transaction.starCount) {
      console.log(`‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: ${transaction.starCount}`);
    }
    
    if (transaction.isGift) {
      console.log(`üéÅ –ü–æ–¥–∞—Ä–æ–∫: –î–∞${transaction.giftRecipient ? ` –¥–ª—è @${transaction.giftRecipient}` : ''}`);
    }
    
    if (transaction.commission) {
      console.log(`üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${transaction.commission} ${transaction.currency}`);
    }
    
    if (transaction.fragmentOrderId) {
      console.log(`üîó Fragment Order ID: ${transaction.fragmentOrderId}`);
    }
    
    if (transaction.status === 'DECLINED' && (transaction.errorCode || transaction.errorDescription)) {
      console.log(`‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏: ${transaction.errorCode || 'N/A'}`);
      console.log(`‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: ${transaction.errorDescription || 'N/A'}`);
    }
    
    if (transaction.processingError) {
      console.log(`üö® –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${transaction.processingError}`);
    }
    
    console.log('='.repeat(80));
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
   */
  private getStatusIcon(status: string): string {
    switch (status) {
      case 'PAID':
        return '‚úÖ';
      case 'DECLINED':
        return '‚ùå';
      case 'PENDING':
        return '‚è≥';
      case 'ERROR':
        return 'üö®';
      case 'PAYMENT_CREATED':
        return 'üÜï';
      case 'PAYMENT_FAILED':
        return 'üí•';
      case 'WEBHOOK_SUCCESS':
        return 'üì®';
      case 'WEBHOOK_FAILED':
        return 'üìÆ';
      default:
        return '‚ùì';
    }
  }


  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ JSON —Ñ–∞–π–ª
   */
  private async saveToJsonFile(transaction: TransactionLog): Promise<void> {
    try {
      let transactions: TransactionLog[] = [];

      // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      if (existsSync(this.transactionsFile)) {
        const fs = require('fs');
        const data = fs.readFileSync(this.transactionsFile, 'utf8');
        if (data.trim()) {
          transactions = JSON.parse(data);
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      transactions.push(transaction);

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
      if (transactions.length > 1000) {
        transactions = transactions.slice(-1000);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
      await writeFileAsync(this.transactionsFile, JSON.stringify(transactions, null, 2), 'utf8');
    } catch (error) {
      this.logger.error('Failed to save to JSON file:', error);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥
   */
  private async appendToDailyLog(transaction: TransactionLog): Promise<void> {
    try {
      const logLine = this.formatLogLine(transaction);
      await appendFileAsync(this.dailyLogFile, logLine + '\n', 'utf8');
    } catch (error) {
      this.logger.error('Failed to append to daily log:', error);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∞
   */
  private formatLogLine(transaction: TransactionLog): string {
    const parts = [
      transaction.timestamp,
      transaction.status,
      transaction.transactionId,
      transaction.orderId,
      `${transaction.amount} ${transaction.currency}`,
      transaction.paymentMethod,
    ];

    if (transaction.userId) {
      parts.push(`User:${transaction.userId}`);
    }

    if (transaction.username) {
      parts.push(`@${transaction.username}`);
    }

    if (transaction.starCount) {
      parts.push(`Stars:${transaction.starCount}`);
    }

    if (transaction.isGift && transaction.giftRecipient) {
      parts.push(`Gift:@${transaction.giftRecipient}`);
    }

    if (transaction.errorCode) {
      parts.push(`Error:${transaction.errorCode}`);
    }

    if (transaction.fragmentOrderId) {
      parts.push(`Fragment:${transaction.fragmentOrderId}`);
    }

    return parts.join(' | ');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
   */
  async getTransactionStats(): Promise<{
    total: number;
    paid: number;
    declined: number;
    pending: number;
    error: number;
    totalAmount: number;
    totalStars: number;
  }> {
    try {
      if (!existsSync(this.transactionsFile)) {
        return {
          total: 0,
          paid: 0,
          declined: 0,
          pending: 0,
          error: 0,
          totalAmount: 0,
          totalStars: 0,
        };
      }

      const fs = require('fs');
      const data = fs.readFileSync(this.transactionsFile, 'utf8');
      if (!data.trim()) {
        return {
          total: 0,
          paid: 0,
          declined: 0,
          pending: 0,
          error: 0,
          totalAmount: 0,
          totalStars: 0,
        };
      }

      const transactions: TransactionLog[] = JSON.parse(data);
      
      const stats = transactions.reduce(
        (acc, t) => {
          acc.total++;
          switch (t.status) {
            case 'PAID':
              acc.paid++;
              acc.totalAmount += t.amount;
              acc.totalStars += t.starCount || 0;
              break;
            case 'DECLINED':
              acc.declined++;
              break;
            case 'PENDING':
              acc.pending++;
              break;
            case 'ERROR':
              acc.error++;
              break;
          }
          return acc;
        },
        {
          total: 0,
          paid: 0,
          declined: 0,
          pending: 0,
          error: 0,
          totalAmount: 0,
          totalStars: 0,
        }
      );

      return stats;
    } catch (error) {
      this.logger.error('Failed to get transaction stats:', error);
      return {
        total: 0,
        paid: 0,
        declined: 0,
        pending: 0,
        error: 0,
        totalAmount: 0,
        totalStars: 0,
      };
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
   */
  async logSuccessfulTransaction(data: {
    transactionId: string;
    orderId: string;
    amount: number;
    currency: string;
    paymentMethod: string;
    commission?: number;
    paymentTime?: string;
    userId?: number;
    username?: string;
    chatId?: number;
    starCount?: number;
    isGift?: boolean;
    giftRecipient?: string;
    fragmentOrderId?: string;
  }): Promise<void> {
    await this.logTransaction({
      ...data,
      status: 'PAID',
      timestamp: new Date().toISOString(),
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–µ—É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
   */
  async logFailedTransaction(data: {
    transactionId: string;
    orderId: string;
    amount: number;
    currency: string;
    paymentMethod: string;
    errorCode?: string;
    errorDescription?: string;
    userId?: number;
    username?: string;
    chatId?: number;
    starCount?: number;
    isGift?: boolean;
    giftRecipient?: string;
  }): Promise<void> {
    await this.logTransaction({
      ...data,
      status: 'DECLINED',
      timestamp: new Date().toISOString(),
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async logProcessingError(data: {
    transactionId: string;
    orderId: string;
    amount: number;
    currency: string;
    paymentMethod: string;
    processingError: string;
    userId?: number;
    username?: string;
    chatId?: number;
    starCount?: number;
    isGift?: boolean;
    giftRecipient?: string;
  }): Promise<void> {
    await this.logTransaction({
      ...data,
      status: 'ERROR',
      timestamp: new Date().toISOString(),
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  async logPaymentCreated(data: {
    transactionId: string;
    orderId: string;
    amount: number;
    currency: string;
    paymentMethod: string;
    paymentUrl?: string;
    userId?: number;
    username?: string;
    chatId?: number;
    starCount?: number;
    isGift?: boolean;
    giftRecipient?: string;
  }): Promise<void> {
    await this.logTransaction({
      ...data,
      status: 'PAYMENT_CREATED',
      operationType: 'PAYMENT',
      timestamp: new Date().toISOString(),
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  async logPaymentCreationFailed(data: {
    transactionId: string;
    orderId: string;
    amount: number;
    currency: string;
    paymentMethod: string;
    errorCode?: string;
    errorDescription?: string;
    processingError?: string;
    userId?: number;
    username?: string;
    chatId?: number;
    starCount?: number;
    isGift?: boolean;
    giftRecipient?: string;
  }): Promise<void> {
    await this.logTransaction({
      ...data,
      status: 'PAYMENT_FAILED',
      operationType: 'PAYMENT',
      timestamp: new Date().toISOString(),
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É webhook
   */
  async logWebhookSuccess(data: {
    transactionId: string;
    orderId: string;
    amount: number;
    currency: string;
    paymentMethod: string;
    webhookData?: any;
    userId?: number;
    username?: string;
    chatId?: number;
    starCount?: number;
    isGift?: boolean;
    giftRecipient?: string;
    fragmentOrderId?: string;
  }): Promise<void> {
    await this.logTransaction({
      ...data,
      status: 'WEBHOOK_SUCCESS',
      operationType: 'WEBHOOK',
      timestamp: new Date().toISOString(),
    });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É webhook
   */
  async logWebhookFailed(data: {
    transactionId: string;
    orderId: string;
    amount: number;
    currency: string;
    paymentMethod: string;
    webhookData?: any;
    errorCode?: string;
    errorDescription?: string;
    processingError?: string;
    userId?: number;
    username?: string;
    chatId?: number;
    starCount?: number;
    isGift?: boolean;
    giftRecipient?: string;
  }): Promise<void> {
    await this.logTransaction({
      ...data,
      status: 'WEBHOOK_FAILED',
      operationType: 'WEBHOOK',
      timestamp: new Date().toISOString(),
    });
  }
}

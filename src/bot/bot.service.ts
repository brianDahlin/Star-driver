import { Injectable, Logger } from '@nestjs/common';
import { Telegram } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import { randomUUID } from 'crypto';
import { MIN_STARS, START_CAPTION, STAR_PRICE_USD, Currency } from '../common/constants/star.constants';
import {
  CallbackData,
  PaymentMethod,
} from '../common/constants/payment.constants';
import { WataService } from '../payments/wata.service';
import { PayID19Service } from '../payments/payid19.service';
import { FragmentService } from '../payments/fragment.service';
import { TransactionLoggerService } from '../common/services/transaction-logger.service';
import { Markup } from 'telegraf';

// –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
interface SessionData {
  flow: 'buy' | 'gift';
  step: number;
  username?: string;
  count?: number;
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –¥–ª—è webhook'–æ–≤
export interface OrderInfo {
  chatId: number;
  userId: number;
  count: number;
  isGift: boolean;
  giftUsername?: string;
  description: string;
  timestamp: string;
}

@Injectable()
export class BotService {
  private readonly tg: Telegram;
  private readonly logger = new Logger(BotService.name);
  private readonly session = new Map<number, SessionData>();
  
  // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ Reply-–º–µ–Ω—é
  private readonly mainKeyboard = Markup.keyboard([
    ['‚≠ê –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã'],
    ['üéÅ –°–¥–µ–ª–∞—Ç—å –ü–æ–¥–∞—Ä–æ–∫ –î—Ä—É–≥—É'],
  ]).resize().oneTime(false);

  constructor(
    private readonly config: ConfigService,
    private readonly wataService: WataService,
    private readonly payid19Service: PayID19Service,
    private readonly fragmentService: FragmentService,
    private readonly transactionLogger: TransactionLoggerService,
  ) {
    const token = this.config.getOrThrow<string>('TELEGRAM_TOKEN');
    this.tg = new Telegram(token);
    this.logger.log('Telegram client initialized');
  }

  /** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start */
  async handleStart(chatId: number): Promise<void> {
    this.session.delete(chatId);
    const bannerUrl = this.config.getOrThrow<string>('BANNER_URL');
    try {
      await this.tg.sendPhoto(chatId, bannerUrl, {
        caption: START_CAPTION,
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚≠ê –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã', callback_data: CallbackData.BUY }],
            [
              {
                text: 'üéÅ –°–¥–µ–ª–∞—Ç—å –ü–æ–¥–∞—Ä–æ–∫ –î—Ä—É–≥—É',
                callback_data: CallbackData.GIFT,
              },
            ],
          ],
        },
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ Reply-–º–µ–Ω—é
      await this.tg.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: this.mainKeyboard.reply_markup
      });
      
      this.logger.log(`/start handled for chat ${chatId}`);
    } catch (err) {
      this.logger.error(`handleStart failed for chat ${chatId}`, err as Error);
      await this.tg.sendMessage(chatId, START_CAPTION, {
        reply_markup: this.mainKeyboard.reply_markup
      });
    }
  }

  /** –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ */
  async handleCallback(
    queryId: string,
    data: CallbackData,
    userId: number,
  ): Promise<void> {
    await this.tg.answerCbQuery(queryId).catch(() => {});
    let session: SessionData;
    switch (data) {
      case CallbackData.BUY:
        session = { flow: 'buy', step: 1 };
        this.session.set(userId, session);
        await this.askCount(userId);
        return;
      case CallbackData.GIFT:
        session = { flow: 'gift', step: 1 };
        this.session.set(userId, session);
        await this.askUsername(userId);
        return;
      default:
        await this.tg.sendMessage(
          userId,
          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ /start.',
          { reply_markup: this.mainKeyboard.reply_markup }
        );
        return;
    }
  }

  /** –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */
  async handleMessage(chatId: number, text: string): Promise<void> {
    const session = this.session.get(chatId);
    if (!session) {
      await this.tg.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.', {
        reply_markup: this.mainKeyboard.reply_markup
      });
      return;
    }
    if (session.flow === 'buy') {
      await this.processBuyFlow(chatId, text, session);
    } else {
      await this.processGiftFlow(chatId, text, session);
    }
  }

  /** –®–∞–≥ 1: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ */
  private async askCount(chatId: number): Promise<void> {
    await this.tg.sendMessage(
      chatId,
      `üåü –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ (–º–∏–Ω–∏–º—É–º ${MIN_STARS}):`,
      { reply_markup: this.mainKeyboard.reply_markup }
    );
  }

  /** –®–∞–≥ 1 (–ø–æ–¥–∞—Ä–æ–∫): –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º username –ø–æ–ª—É—á–∞—Ç–µ–ª—è */
  private async askUsername(chatId: number): Promise<void> {
    await this.tg.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è:', {
      reply_markup: this.mainKeyboard.reply_markup
    });
  }

  /** –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ–∫—É–ø–∫–∏ */
  private async processBuyFlow(
    chatId: number,
    text: string,
    session: SessionData,
  ): Promise<void> {
    if (session.step === 1) {
      const count = Number(text);
      if (isNaN(count) || count < MIN_STARS) {
        await this.tg.sendMessage(
          chatId,
          `‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º ${MIN_STARS}).`,
          { reply_markup: this.mainKeyboard.reply_markup }
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å Fragment –ø–µ—Ä–µ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã
      const balanceCheckResult = await this.checkFragmentBalance(count);
      if (!balanceCheckResult.sufficient) {
        await this.tg.sendMessage(
          chatId,
          
          `üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
        );
        return;
      }

      session.count = count;
      session.step = 2;
      await this.sendPaymentOptionsWithDetails(chatId, count, false);
      return;
    }
    // —à–∞–≥ 2: –≤—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã
    const method = text as PaymentMethod;
    await this.processPayment(chatId, method, session, false);
  }

  /** –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ–¥–∞—Ä–∫–∞ */
  private async processGiftFlow(
    chatId: number,
    text: string,
    session: SessionData,
  ): Promise<void> {
    if (session.step === 1) {
      session.username = text.trim().replace(/^@/, '');
      session.step = 2;
      await this.askCount(chatId);
      return;
    }
    if (session.step === 2) {
      const count = Number(text);
      if (isNaN(count) || count < MIN_STARS) {
        await this.tg.sendMessage(
          chatId,
          `‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º ${MIN_STARS}).`,
          { reply_markup: this.mainKeyboard.reply_markup }
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å Fragment –ø–µ—Ä–µ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã
      const balanceCheckResult = await this.checkFragmentBalance(count);
      if (!balanceCheckResult.sufficient) {
        await this.tg.sendMessage(
          chatId,
         
          `üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
        );
        return;
      }

      session.count = count;
      session.step = 3;
      await this.sendPaymentOptionsWithDetails(chatId, count, true, session.username);
      return;
    }
    // —à–∞–≥ 3: –≤—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã
    const method = text as PaymentMethod;
    await this.processPayment(chatId, method, session, true);
  }



  /** –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã */
  private async sendPaymentOptionsWithDetails(
    chatId: number, 
    count: number, 
    isGift: boolean, 
    giftUsername?: string
  ): Promise<void> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π orderId
      const timestamp = Date.now();
      const randomId = randomUUID().replace(/-/g, '').substring(0, 8);
      const microseconds = process.hrtime.bigint() % 1000000n;
      const orderId = `${timestamp}_${chatId}_${randomId}_${microseconds}`;
      
      const description = isGift 
        ? `–ü–æ–¥–∞—Ä–æ–∫ ${count} –∑–≤–µ–∑–¥ –¥–ª—è @${giftUsername}` 
        : `–ü–æ–∫—É–ø–∫–∞ ${count} –∑–≤–µ–∑–¥`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      this.saveOrderInfo(orderId, {
        chatId,
        userId: chatId,
        count,
        isGift,
        giftUsername,
        description,
        timestamp: new Date().toISOString(),
      });

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      const cryptoAmount = count * STAR_PRICE_USD; // USD –¥–ª—è –∫—Ä–∏–ø—Ç–æ
      const cardAmount = count * 2; // RUB –¥–ª—è –∫–∞—Ä—Ç/–°–ë–ü –≤–∞—Ç–∞ —Å–µ—Ä–≤–∏—Å –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω—å—à–µ —Å—Ç–∞ —Ä—É–±–ª–µ–π

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º username –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è PayID19
      let recipientUsername: string;
      if (isGift && giftUsername) {
        recipientUsername = giftUsername;
      } else {
        const userInfo = await this.getUserInfo(chatId);
        recipientUsername = userInfo?.username || `user_${chatId}`;
      }

      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
      const enhancedDescription = `${description} | recipient:${recipientUsername}`;
      
      try {
        const [cryptoInvoiceUrl, cardPaymentLink] = await Promise.all([
          this.payid19Service.createInvoice(
            cryptoAmount,
            'USD',
            enhancedDescription,
            orderId,
            undefined
          ),
          this.wataService.createPaymentLink(
            cardAmount,
            Currency.RUB,
            description,
            orderId
          )
        ]);

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
        await this.transactionLogger.logPaymentCreated({
          transactionId: orderId + '_crypto',
          orderId,
          amount: cryptoAmount,
          currency: 'USD',
          paymentMethod: 'PayID19',
          paymentUrl: cryptoInvoiceUrl,
          userId: chatId,
          username: recipientUsername,
          chatId,
          starCount: count,
          isGift,
          giftRecipient: giftUsername
        });

        await this.transactionLogger.logPaymentCreated({
          transactionId: orderId + '_wata',
          orderId,
          amount: cardAmount,
          currency: 'RUB',
          paymentMethod: 'WATA',
          paymentUrl: cardPaymentLink.url,
          userId: chatId,
          username: recipientUsername,
          chatId,
          starCount: count,
          isGift,
          giftRecipient: giftUsername
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        const orderDetails = `üìã **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:**\n` +
          `‚Ä¢ –ó–∞–∫–∞–∑: \`${orderId}\`\n` +
          `‚Ä¢ –ó–≤—ë–∑–¥: **${count}**\n` +
          `${isGift ? `‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: **@${giftUsername}**\n` : ''}\n` +
          `üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:**`;

        // –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
        const inlineKeyboard = [
          [{
            text: `üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (${cryptoAmount} USD)`,
            url: cryptoInvoiceUrl
          }],
          [{
            text: `üí≥ –ö–∞—Ä—Ç–∞/–°–ë–ü (${cardAmount} RUB)`,
            url: cardPaymentLink.url || '#'
          }]
        ];

        await this.tg.sendMessage(chatId, orderDetails, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: inlineKeyboard,
            remove_keyboard: true
          }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –º–µ–Ω—é
        await this.tg.sendMessage(
          chatId,
          '‚è∞ **–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: 30 –º–∏–Ω—É—Ç**\n\n' +
          '‚è≥ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ\n' +
          '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–≤—ë–∑–¥—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã\n' +
          '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
          { 
            parse_mode: 'Markdown',
            reply_markup: this.mainKeyboard.reply_markup
          }
        );

        this.logger.log(`Payment options with details sent for order ${orderId}`);
        
        // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –≤—Å—ë —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ webhook
        this.session.delete(chatId);
        
      } catch (paymentError) {
        this.logger.error('Failed to create payments:', paymentError);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
        await this.transactionLogger.logPaymentCreationFailed({
          transactionId: orderId + '_failed',
          orderId,
          amount: cryptoAmount,
          currency: 'USD',
          paymentMethod: 'MULTIPLE',
          errorDescription: 'Failed to create payment links',
          processingError: paymentError instanceof Error ? paymentError.message : 'Unknown payment error',
          userId: chatId,
          username: recipientUsername,
          chatId,
          starCount: count,
          isGift,
          giftRecipient: giftUsername
        });
        
        throw paymentError; // –ü–µ—Ä–µ–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ–±—â–µ–º catch
      }
      
    } catch (error) {
      this.logger.error('Failed to create payment options with details:', error);
      await this.tg.sendMessage(
        chatId,
        '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        { reply_markup: this.mainKeyboard.reply_markup }
      );
      this.session.delete(chatId);
    }
  }

  /** –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã (–º–æ–∫–∏) */
  private async processPayment(
    chatId: number,
    choice: PaymentMethod,
    session: SessionData,
    isGift: boolean,
  ): Promise<void> {
    const count = session.count!;
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–ø–µ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã–π orderId
    const timestamp = Date.now();
    const randomId = randomUUID().replace(/-/g, '').substring(0, 8); // 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ UUID
    const microseconds = process.hrtime.bigint() % 1000000n; // –ú–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –¥–æ–ø. —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const orderId = `${timestamp}_${chatId}_${randomId}_${microseconds}`;
    const description = isGift 
      ? `–ü–æ–¥–∞—Ä–æ–∫ ${count} –∑–≤–µ–∑–¥ –¥–ª—è @${session.username}` 
      : `–ü–æ–∫—É–ø–∫–∞ ${count} –∑–≤–µ–∑–¥`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è webhook'–∞
    this.saveOrderInfo(orderId, {
      chatId,
      userId: chatId,
      count,
      isGift,
      giftUsername: session.username,
      description,
      timestamp: new Date().toISOString(),
    });
    
    switch (choice) {
      case PaymentMethod.CRYPTO: {
        try {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º username –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ PayID19
          let recipientUsername: string;
          if (isGift && session.username) {
            recipientUsername = session.username;
          } else {
            // –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–µ–±–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            const userInfo = await this.getUserInfo(chatId);
            recipientUsername = userInfo?.username || `user_${chatId}`;
          }
          
          // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ PayID19 –¥–ª—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
          const amount = count * STAR_PRICE_USD; // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–≤—ë–∑–¥ –≤ USD
          const enhancedDescription = `${description} | recipient:${recipientUsername}`;
          
          const invoiceUrl = await this.payid19Service.createInvoice(
            amount,
            'USD',
            enhancedDescription,
            orderId,
            undefined, // email –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
          );
          
          // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
          const supportedCryptos = this.payid19Service.getFormattedCryptocurrencies();
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
          const message = `üí∞ –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π\n\n` +
            `üöÄ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n${invoiceUrl}\n\n` +
            `üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n` +
            `‚Ä¢ –ó–∞–∫–∞–∑: ${orderId}\n` +
            `‚Ä¢ –°—É–º–º–∞: ${amount} USD\n` +
            `‚Ä¢ –ó–≤—ë–∑–¥: ${count}\n\n` +
            `ü™ô –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:\n` +
            `${supportedCryptos}\n\n` +
            `‚è∞ –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: 1 —á–∞—Å\n` +
            `üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ PayID19`;
          
          await this.tg.sendMessage(chatId, message, {
            reply_markup: this.mainKeyboard.reply_markup
          });
          
          this.logger.log(`PayID19 invoice created for order ${orderId}: ${invoiceUrl}`);
        } catch (error) {
          this.logger.error('PayID19 payment creation failed', error);
          await this.tg.sendMessage(
            chatId,
            '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            { reply_markup: this.mainKeyboard.reply_markup }
          );
          this.session.delete(chatId);
          return;
        }
        break;
      }
      case PaymentMethod.SBP: {
        try {
          // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ WATA API
          const amount = count *2; //STAR_PRICE_RUB; // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–≤—ë–∑–¥ –≤ —Ä—É–±–ª—è—Ö
          const paymentLink = await this.wataService.createPaymentLink(
            amount,
            Currency.RUB,
            description,
            orderId
          );
          
          if (paymentLink.url) {
            const message = `üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π/–°–ë–ü\n\n` +
              `üöÄ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n${paymentLink.url}\n\n` +
              `üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n` +
              `‚Ä¢ –ó–∞–∫–∞–∑: ${orderId}\n` +
              `‚Ä¢ –°—É–º–º–∞: ${amount} ${paymentLink.currency}\n` +
              `‚Ä¢ –ó–≤—ë–∑–¥: ${count}\n\n` +
              `‚è∞ –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏\n` +
              `üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ WATA`;
            
            await this.tg.sendMessage(chatId, message, {
              reply_markup: this.mainKeyboard.reply_markup
            });
            
            this.logger.log(`Payment link created for order ${orderId}: ${paymentLink.url}`);
          } else {
            await this.tg.sendMessage(
              chatId,
              '‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
              { reply_markup: this.mainKeyboard.reply_markup }
            );
            this.session.delete(chatId);
          }
        } catch (error) {
          this.logger.error('Payment creation failed', error);
          await this.tg.sendMessage(
            chatId,
            '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            { reply_markup: this.mainKeyboard.reply_markup }
          );
          this.session.delete(chatId);
          return;
        }
        break;
      }
      default:
        await this.tg.sendMessage(chatId, '‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –º–µ–Ω—é.', {
          reply_markup: this.mainKeyboard.reply_markup
        });
        this.session.delete(chatId);
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
    await this.tg.sendMessage(
      chatId, 
      '‚è≥ –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...\n\n' +
      '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–≤—ë–∑–¥—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã.\n' +
      '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.',
      { reply_markup: this.mainKeyboard.reply_markup }
    );
    
    // –°–µ—Å—Å–∏—é –Ω–µ —É–¥–∞–ª—è–µ–º - –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –≤ webhook –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
  private static readonly orders = new Map<string, OrderInfo>();

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ webhook'–∞—Ö
   */
  saveOrderInfo(orderId: string, orderInfo: OrderInfo): void {
    BotService.orders.set(orderId, orderInfo);
    this.logger.log(`Order info saved: ${orderId} for user ${orderInfo.chatId}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ –µ–≥–æ ID
   */
  static getOrderInfo(orderId: string): OrderInfo | undefined {
    return BotService.orders.get(orderId);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  static removeOrderInfo(orderId: string): void {
    BotService.orders.delete(orderId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
   */
  async getUserInfo(userId: number): Promise<{ username?: string; first_name?: string; last_name?: string } | null> {
    try {
      const chat = await this.tg.getChat(userId);
      if (chat.type === 'private') {
        return {
          username: (chat as any).username,
          first_name: (chat as any).first_name,
          last_name: (chat as any).last_name,
        };
      }
      return null;
    } catch (error) {
      this.logger.warn(`Failed to get user info for ${userId}:`, error);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –∑–≤—ë–∑–¥
   */
  async notifyStarsPurchaseSuccess(
    chatId: number,
    count: number,
    isGift: boolean,
    recipientUsername?: string,
    fragmentOrderId?: string
  ): Promise<void> {
    try {
      let message: string;
      
      if (isGift && recipientUsername) {
        message = `üéâ **–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n` +
                 `‚≠ê **${count} –∑–≤—ë–∑–¥** —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **@${recipientUsername}**\n\n` +
                 `‚úÖ –ü–ª–∞—Ç—ë–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n\n`;
        if (fragmentOrderId) {
          message += `üìã Fragment Order ID: \`${fragmentOrderId}\`\n\n`;
        }
        message += `‚úÖ **–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n` +
                  `üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!`;
      } else {
        message = `‚úÖ **–ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n` +
                 `‚≠ê **${count} –∑–≤—ë–∑–¥** —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç\n\n` +
                 `üí∞ –ü–ª–∞—Ç—ë–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n\n`;
        if (fragmentOrderId) {
          message += `üìã Fragment Order ID: \`${fragmentOrderId}\`\n\n`;
        }
        message += `‚úÖ **–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n` +
                  `üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!`;
      }

      await this.tg.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: this.mainKeyboard.reply_markup
      });
      
      this.logger.log(`Success notification sent to chat ${chatId}`);
    } catch (error) {
      this.logger.error(`Failed to send success notification to chat ${chatId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥
   */
  async notifyStarsPurchaseError(
    chatId: number,
    count: number,
    isGift: boolean,
    _errorMessage: string
  ): Promise<void> {
    try {
      const message = `‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∑–≤—ë–∑–¥**\n\n` +
                     `–ù–µ —É–¥–∞–ª–æ—Å—å ${isGift ? '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫' : '–Ω–∞—á–∏—Å–ª–∏—Ç—å –∑–≤—ë–∑–¥—ã'}\n` +
                     `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count} –∑–≤—ë–∑–¥\n\n` +
                     `üîÑ –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã\n` +
                     `üí¨ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è`;

      await this.tg.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: this.mainKeyboard.reply_markup
      });
      
      this.logger.log(`Error notification sent to chat ${chatId}`);
    } catch (error) {
      this.logger.error(`Failed to send error notification to chat ${chatId}:`, error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ Fragment –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥
   * @param starsCount –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
   */
  private async checkFragmentBalance(starsCount: number): Promise<{
    sufficient: boolean;
    availableTon: string;
    requiredTon: number;
  }> {
    try {
      this.logger.log(`Checking Fragment balance for ${starsCount} stars`);
      
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
      const walletBalance = await this.fragmentService.getWalletBalance();
      const availableTonNum = parseFloat(walletBalance.balance);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
      const requiredTon = this.fragmentService.calculateStarsCostInTon(starsCount);
      
      const sufficient = availableTonNum >= requiredTon;
      
      this.logger.log(`Balance check result: available=${availableTonNum} TON, required=${requiredTon} TON, sufficient=${sufficient}`);
      
      return {
        sufficient,
        availableTon: walletBalance.balance,
        requiredTon,
      };
    } catch (error) {
      this.logger.error('Failed to check Fragment balance:', error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
      // –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—å–±—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
      const requiredTon = this.fragmentService.calculateStarsCostInTon(starsCount);
      
      return {
        sufficient: false,
        availableTon: '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
        requiredTon,
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
   */
  async handleHelp(chatId: number): Promise<void> {
    const helpMessage = `üÜò **–ü–æ–º–æ—â—å**\n\n` +
      `‚≠ê **–û —Å–µ—Ä–≤–∏—Å–µ:**\n` +
      `–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ª–µ–≥–∫–æ –ø–æ–∫—É–ø–∞—Ç—å –∑–≤—ë–∑–¥—ã Telegram –¥–ª—è —Å–µ–±—è –∏–ª–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–∑—å—è–º.\n\n` +
      `üí≥ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**\n` +
      `‚Ä¢ üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (PayID19)\n` +
      `‚Ä¢ üí≥ –ö–∞—Ä—Ç–∞/–°–ë–ü (WATA)\n\n` +
      `üéØ **–ö–æ–º–∞–Ω–¥—ã:**\n` +
      `‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n` +
      `‚Ä¢ /buy_stars - –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã —Å–µ–±–µ\n` +
      `‚Ä¢ /gift - –ü–æ–¥–∞—Ä–∏—Ç—å –∑–≤—ë–∑–¥—ã –¥—Ä—É–≥—É\n` +
      `‚ö° **–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** ${MIN_STARS} –∑–≤—ë–∑–¥\n\n` +
      `üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ API`;

    await this.tg.sendMessage(chatId, helpMessage, {
      parse_mode: 'Markdown',
      reply_markup: this.mainKeyboard.reply_markup
    });
    
    this.logger.log(`Help sent to chat ${chatId}`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /support
   */
  async handleSupport(chatId: number): Promise<void> {
    const supportMessage = `üÜò **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n` +
      `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞:\n\n` +
      `üìß **–û–±—Ä–∞—â–µ–Ω–∏—è:**\n` +
      `‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –≤ —á–∞—Ç–µ\n` +
      `‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ\n` +
      `‚Ä¢ –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å\n\n` +
      `‚è∞ **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** –æ–±—ã—á–Ω–æ 15-30 –º–∏–Ω—É—Ç\n\n` +
      `üìÑ **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**\n` +
      `‚Ä¢ –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª, –∞ –∑–≤—ë–∑–¥—ã –Ω–µ –ø—Ä–∏—à–ª–∏ - –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç\n` +
      `‚Ä¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n\n` +
      `‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å: /help`;

    await this.tg.sendMessage(chatId, supportMessage, {
      parse_mode: 'Markdown',
      reply_markup: this.mainKeyboard.reply_markup
    });
    
    this.logger.log(`Support info sent to chat ${chatId}`);
  }
}

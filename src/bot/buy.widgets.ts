import { Scenes, Markup } from 'telegraf';
import { Injectable } from '@nestjs/common';
import { FragmentService } from '../payments/fragment.service';

@Injectable()
@Scenes.WizardStep()
export class BuyScene extends Scenes.WizardScene {
  constructor(private readonly fragment: FragmentService) {
    super(
      'buy-wizard',
      async (ctx) => {
        await ctx.reply('üåü –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ (–º–∏–Ω–∏–º—É–º 50):');
        return this.next();
      },
      async (ctx) => {
        const count = parseInt(ctx.message.text);
        ctx.wizard.state.count = count;
        await ctx.reply(
          'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
          Markup.keyboard([
            ['TON', '–ö—Ä–∏–ø—Ç–∞ / USDT'],
            ['–°–ë–ü / –ö–∞—Ä—Ç—ã –†–§'],
            ['–ù–∞–∑–∞–¥'],
          ]).oneTime(),
        );
        return this.next();
      },
      async (ctx) => {
        const choice = ctx.message.text;
        const { count } = ctx.wizard.state;
        if (choice === 'TON') {
          const invoice = await this.fragment.createTonInvoice(count);
          return ctx.reply(
            `–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª—ë–∫ –ø–æ –∞–¥—Ä–µ—Å—É:\n\`${invoice.walletAddress}\`\n–°—É–º–º–∞: ${invoice.amount} TON`,
            { parse_mode: 'Markdown' },
          );
        }
        if (choice === '–ö—Ä–∏–ø—Ç–∞ / USDT') {
          const link = await this.fragment.createUsdtLink(count);
          return ctx.replyWithHTML(
            `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT:\n<a href="${link}">–û–ø–ª–∞—Ç–∏—Ç—å</a>`,
          );
        }
        if (choice === '–°–ë–ü / –ö–∞—Ä—Ç—ã –†–§') {
          const link = await this.fragment.createSbpLink(count);
          return ctx.replyWithHTML(
            `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π:\n<a href="${link}">–û–ø–ª–∞—Ç–∏—Ç—å</a>`,
          );
        }
        return ctx.scene.leave();
      },
    );
  }
}

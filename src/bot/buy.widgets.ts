// src/bot/buy.widgets.ts
import { Wizard, WizardStep, Ctx } from 'nestjs-telegraf';
import { Injectable, Logger } from '@nestjs/common';
import { Markup } from 'telegraf';
import { Scenes, Context as TelegrafContext } from 'telegraf';
import { FragmentService } from '../payments/fragment.service';

type MyContext = Scenes.WizardContext & TelegrafContext;

@Wizard('buy-wizard')
@Injectable()
export class BuyScene {
  private readonly logger = new Logger(BuyScene.name);
  private readonly MIN_STARS = 50;

  constructor(private readonly fragment: FragmentService) {}

  @WizardStep(1)
  async askCount(@Ctx() ctx: MyContext): Promise<void> {
    this.logger.log('–®–∞–≥ 1: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
    await ctx.reply(
      `üåü –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ (–º–∏–Ω–∏–º—É–º ${this.MIN_STARS}):`,
    );
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –±–µ–∑ await, —Ç–∞–∫ –∫–∞–∫ next() —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
    ctx.wizard.next();
  }

  @WizardStep(2)
  async choosePaymentMethod(@Ctx() ctx: MyContext): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.updateType !== 'message' || typeof ctx.message?.text !== 'string') {
      await ctx.reply(
        `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤—ë–∑–¥.`,
      );
      return;
    }
    const rawText = ctx.message.text;
    const text = rawText.trim();
    const count = Number(text);

    if (count < this.MIN_STARS) {
      await ctx.reply(
        `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω–µ–µ ${this.MIN_STARS}.`,
      );
      return;
    }

    ctx.wizard.state.count = count;
    await ctx.reply(
      'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
      Markup.keyboard([['TON', '–ö—Ä–∏–ø—Ç–∞ / USDT'], ['–°–ë–ü / –ö–∞—Ä—Ç—ã –†–§'], ['–ù–∞–∑–∞–¥']])
        .oneTime()
        .resize(),
    );
    ctx.wizard.next();
  }

  @WizardStep(3)
  async processPayment(@Ctx() ctx: MyContext): Promise<void> {
    const choice = ctx.message?.text;
    const count = ctx.wizard.state.count as number;

    switch (choice) {
      case 'TON': {
        const invoice = await this.fragment.createTonInvoice(count);
        await ctx.replyWithMarkdownV2(
          `–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª—ë–∫:\n\`${invoice.walletAddress}\`\n–°—É–º–º–∞: *${invoice.amount}* TON`,
        );
        break;
      }
      case '–ö—Ä–∏–ø—Ç–∞ / USDT': {
        const link = await this.fragment.createUsdtLink(count);
        await ctx.replyWithHTML(
          `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã USDT:\n<a href="${link}">–û–ø–ª–∞—Ç–∏—Ç—å</a>`,
        );
        break;
      }
      case '–°–ë–ü / –ö–∞—Ä—Ç—ã –†–§': {
        const link = await this.fragment.createSbpLink(count);
        await ctx.replyWithHTML(
          `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π:\n<a href="${link}">–û–ø–ª–∞—Ç–∏—Ç—å</a>`,
        );
        break;
      }
      case '–ù–∞–∑–∞–¥': {
        await ctx.reply('‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞...');
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É –±–µ–∑ await
        ctx.wizard.selectStep(0);
        return;
      }
      default: {
        await ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.');
        return;
      }
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É –ø–æ—Å–ª–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    await ctx.scene.leave();
  }
}
